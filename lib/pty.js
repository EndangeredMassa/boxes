// Generated by CoffeeScript 2.0.0-beta8
void function () {
  var pty;
  pty = require('pty.js');
  module.exports = function (window, command) {
    var clearFrom, cursorPosition, history, term;
    term = pty.spawn(command, [], {
      name: 'xterm-color',
      cols: 40,
      rows: 6
    });
    history = '';
    cursorPosition = 0;
    clearFrom = function (position) {
      var lastLine, lines;
      lines = history.split('\n');
      lastLine = lines.pop();
      lastLine = lastLine.substr(0, position);
      lines.push(lastLine);
      return history = lines.join('\n');
    };
    term.on('data', function (data) {
      var noop, parseLine;
      data = data.replace(/\r\r\n/gm, '\n');
      data = data.replace(/\r\n/gm, '\n');
      parseLine = function () {
        var clearCursor, cursorMatch, moveCursor, parts;
        moveCursor = new RegExp('\x1b\\[([0-9]+)G');
        clearCursor = new RegExp('\x1b\\[0J');
        if (null != (cursorMatch = moveCursor.exec(data))) {
          cursorPosition = parseInt(cursorMatch[1], 10) - 1;
          data = data.replace(moveCursor, '');
        }
        if (null != (cursorMatch = data.match(clearCursor))) {
          parts = data.split(cursorMatch[0]);
          history += parts[0];
          clearFrom(cursorPosition);
          data = parts[1];
        }
        return !!cursorMatch;
      };
      while (parseLine(data)) {
        noop = '';
      }
      if (data.length === 0)
        return;
      history += data;
      if (history.indexOf('\x1b[1;1H') > -1)
        history = history.split('\x1b[1;1H')[1];
      return window.setContent(history);
    });
    term.on('error', function (error) {
      return console.error(error.stack);
    });
    term.on('exit', function () {
      return window.destroy();
    });
    return term;
  };
}.call(this);
